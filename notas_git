Notas Git
+++++++++++++

git init
git clone https://endereco_do_repositorio
git remote -v //lista os endereços remotos  do repositorio
git remote add [origin] [endereco_remoto] //para adicionar endereco remoto

git branch [nome_da_branch] //para criar branch
git branch -d [nome nome_da_branch] //apaga branch
git checkout -b [nome_da_branch] //cria a branch e muda para branch criada
git checkout [nome_da_branch] //muda de branch 

git add [nome_do_arquivo] //adiciona arquivo para área de observação(index/staging
git add [nome_do_arquivo] [nome_do_arquivo] //para adicionar mais de um arquivo
git add -a //para adicionar todos arquivos, menos os novos arquivos
git add . //adicionar todos arquivo para área de observação

git commit -m 'descrição da atividade' // para commit
git commit // para commitar e abrir terminal para entrada de descrição

Enviando alterações:
    git push origin master //envia as atualizações para o repositório

Merge:
    git checkout master
    git merge desenvolvimento //traz as alterações da branch de desenvolvimento para a branch master

Atualizando repositório local:
    git fetch //atualiza as referências remotas
    git pull //atualiza os dados remotos(git fetch) e seguida realiza o merge do branch remoto correspondente

Ciclo para manter branch atualizada:
    git checkout master
    git pull //verfifica se existe atualização
    se sim:
        git checkout desenvolvimento
        git rebase master desenvolvimento //atualiza a branch de desenvolvimento, deixa o log mais limpo

        Se existe conflito no rebase:
            - resolver o conflito
            - git add arquivo_com_conflito
            - git rebase --continue //para continuar o rebase

Atualizando a master:
    git checkout master
    git merge desenvolvimento //traz as alterações de desenvolvimento para master


Controle de alterações:
    git checkout //desfaz as alterações
    git checkout -- design // -- indica que os nomes posteriores ao hífens são referentes a arquivos
    git reset HEAD [nome_do_arquivo] //remove o arquivo que esta no index e move para working directory
    git reset HEAD~1 //faz referência ao penúltimo commit e assim por diante, basta mudar o número do commit que deseja remover as alterações
    git reset --hard //as alterações são removidas do histórico local de commits e também tanto do index quanto do working directory, permanentemente.
    git reset --soft //as alterações são removidas do histórico local de commits, mas não são removidas do index.
    git reset //alterações são removidas do histórico local de commits, do index, mas não do working directory`.
    git stash //adiciona arquivos alterados que estão na working directory ou index ao stash para ser recuperado depois
    git stash list //lista todas alterações adicionados ao stash
    git stash pop  //recupera as alterações do primeiro item da pilha e deleta da pilha
    git stash apply stash@{1} //recupera as alterações de acordo com o indice e não deleta da pilha
    git stash drop //apaga alterações(estados) dá area de stash
    git stash clear //limpa todos estados
    git stash drop stash@{1} //limpa estado indicado pela referência
    git reset b6c7cc8e3fea9b255b5845e1114588206679f609 //commit será descartado, redirecionando HEAD para comit anterior ao hash apontado
    git revert -n [hash_do_commit] //desfaz as alterações do commit realizado, -n -> alterações revertidas para que possam ser adicionadas ao working directory e ao index

Buscando por bugs em muitos commits
    *Você indica dois pontos da branch, um com o bug e outro ponto sem, o git então busca entre estes dois pontos um commit e você precisa indicar se ele é bom ou ruim, até achar o commit que ocorreu o bug

    git bisect start //inicia a busca pelo bug entre commits
    git bisect bad HEAD //indica um commit contém o bug que estamos tentando resolver
    git bisect good 02bfc44 //indica um commit que não possui o bug, que está ok
    git bisect bad //indica um commit ruim
    git bisect good //indica um commit bom

    *Para corrigir o erro, conhecemos o hash do commit e podemos utilizar os comandos git reset, git revert ou ver as alterações realizadas naquele commit específico com git show bbd43c6

Técninas de produtividade
    Redução de comando com o alias:
        No arquivo .gitconfig
        vim ~/.gitconfig
        Adicionar:
            [alias]
                st = status
                ci = commit
                envia = !git checkout master && git pull && git checkout desenvolvimento && git rebase master && git checkout master && git merge desenvolvimento && git push //! -> indica que comandos serão enviados ao bash

    Cores:    
        [color]
            diff = auto

    Log:
        git log -p //mostra alterações feitas
        git log --stat //resumo com quantidade de alterações
        git log --pretty=[oneline|oneline|short|medium|full|fuller|email|raw] //defini a quantidade de informaçoes exibidas
        git log --pretty='%an realizou commit em %ad: %s' //defini um formato para o log onde %an - autor, %ad - data e hora, %s - mensagem, %h - hash
        git log --pretty='%an realizou commit em %ad: %s' --graph //mostra um gráfico com as brachs

    
Contribuindo para projetos de outras pessoas:
    fork : copia do projeto
        Fazer alterações, adicionar, commitar.
        Para fazer pull, adicionar endereco remoto do projeto com o git remote add origin_do_projeto https://github.com/...
        Fazer pull request e aguardar a aprovação do dono do projeto
    
    watch:
        watch no Github, seguir projetos sem copia-lo

Fazendo merges avançados com Cherry Pick:
    *Problemas de merge gerados pelo cherry-pick são resolvidos de maneira semelhante ao git merge e git rebase
        git cherry-pick 19f0bb7d8b4be8ecd687b48fca301b71b95eab41 //apenas o commit selecionado seja aplicados na outra branch
        git cherry-pick -n 19f0bb7d8b4be8ecd687b48fca301b71b95eab41 //não copia o commit, alterações serão adicionados ao index
        git cherry-pick abcd..1234 //para pegar todos os commits dentro de um intervalo
